syntax = "proto3";

package dfanout;

option go_package = "github.com/dfanout/dfanout/proto;dfanout";

service AdminService {
  rpc GetFanout(GetFanoutRequest) returns (GetFanoutResponse);
  rpc CreateFanout(CreateFanoutRequest) returns (CreateFanoutResponse);
  rpc UpdateFanout(UpdateFanoutRequest) returns (UpdateFanoutRequest);
  rpc DeleteFanout(DeleteFanoutRequest) returns (DeleteFanoutResponse);
}

message Endpoint {
    string name = 1;

    // When set, endpoint fails the entire fan in the case of a failure on this
    // endpoint. The fan serves the response of the primary endpoint.
    bool primary = 2;

    // TODO: Fail on failure.

    oneof destination {
        HTTPEndpoint http_endpoint = 3;
        // TODO: Support gRPC and Twirp natively in the future.
        // TODO: Support another fanout as an endpoint.
    }
}

message Header {
    string key = 1;

    repeated string values = 2;
}

message HTTPEndpoint {
    string url = 1;

    string method = 2;

    int64 timeout_ms = 3;

    repeated Header header = 4;

    TLSConfig tls_config = 5;

    // TODO: Add retry config.
}

message TLSConfig {
    bool insecure_skip_verify = 1;

    string server_name = 2;

    bytes ca_pem = 3;

    bytes cert_pem = 4;

    bytes key_pem = 5;
}

message GetFanoutRequest {
    string fan_name = 1;
}

message GetFanoutResponse {
    repeated Endpoint endpoints = 1;
}

message CreateFanoutRequest {
    string fanout_name = 1;

    repeated Endpoint endpoints = 2; 
}

message CreateFanoutResponse {
    string endpoint = 1;
}

message UpdateFanoutRequest {
    string fanout_name = 1;

    repeated Endpoint endpoints_to_insert = 2;

    repeated Endpoint endpoints_to_update = 3;

    repeated string endpoints_to_delete = 4;
}

message UpdateFanoutResponse {}

message DeleteFanoutRequest {
    string fanout_name = 1;
}

message DeleteFanoutResponse {}

// Automatically report the number of incoming calls, error rate, and latency.